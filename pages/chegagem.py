import streamlit as st # Importa a biblioteca Streamlit.
import google.generativeai as genai # Importa a biblioteca para interagir com a IA do Google Gemini.

# Configura√ß√µes b√°sicas da p√°gina, como o layout e o t√≠tulo da aba do navegador.
st.set_page_config(layout="centered", page_title="REAL? | Checagem")

st.title("Checagem de Informa√ß√µes") # T√≠tulo da p√°gina de Checagem.
st.write("Cole o texto, link ou envie um arquivo para verificar a veracidade.") # Instru√ß√£o para o usu√°rio.

# --- Integra√ß√£o com a IA Google Gemini ---
# Verifica se a chave de API do Gemini est√° dispon√≠vel nos "segredos" do Streamlit.
# As chaves de API devem ser guardadas em um arquivo .streamlit/secrets.toml (veja a Etapa 4).
if "GEMINI_API_KEY" not in st.secrets:
    st.error("Chave de API do Google Gemini n√£o encontrada. Por favor, adicione-a em `.streamlit/secrets.toml`.")
    st.stop() # Interrompe a execu√ß√£o para evitar erros se a chave n√£o estiver configurada.
else:
    # Configura a API do Gemini com a chave secreta.
    genai.configure(api_key=st.secrets["GEMINI_API_KEY"])
    # Inicializa o modelo de IA que usaremos (ex: 'gemini-pro' para texto).
    model = genai.GenerativeModel('gemini-pro')

# Cria uma √°rea de texto onde o usu√°rio pode inserir a informa√ß√£o.
user_input = st.text_area("Insira a informa√ß√£o aqui:", height=150)

# Cria um bot√£o para iniciar a verifica√ß√£o.
if st.button("Verificar"):
    if user_input: # Verifica se o usu√°rio inseriu algum texto.
        # Mostra uma mensagem de "carregando" enquanto a IA trabalha.
        with st.spinner("Analisando a informa√ß√£o..."):
            try:
                # Define o prompt (a instru√ß√£o) para a IA.
                # Pedimos para a IA analisar, resumir e checar a veracidade.
                prompt = f"Analise a seguinte informa√ß√£o para checar sua veracidade e forne√ßa um resumo conciso (3-4 par√°grafos) com base em fontes confi√°veis. Se poss√≠vel, cite as fontes. Informa√ß√£o: '{user_input}'"
                # Envia o prompt para o modelo Gemini e obt√©m a resposta.
                response = model.generate_content(prompt)
                st.subheader("Resultado da Checagem:") # Subt√≠tulo para o resultado.
                st.write(response.text) # Exibe a resposta da IA.

                # Aqui seria o local para adicionar o bot√£o de leitura em √°udio.
                # st.button("Ouvir Checagem") # Este bot√£o exigiria uma biblioteca adicional (ex: gTTS) e l√≥gica para reproduzir o √°udio.
                # Por enquanto, √© apenas um placeholder.

            except Exception as e: # Captura qualquer erro que possa ocorrer na comunica√ß√£o com a IA.
                st.error(f"Ocorreu um erro ao processar sua solicita√ß√£o: {e}")
                st.info("Verifique se a chave de API est√° correta e se a informa√ß√£o n√£o √© muito complexa para o modelo.")
    else: # Se o usu√°rio n√£o inseriu nada, exibe um aviso.
        st.warning("Por favor, insira alguma informa√ß√£o para verificar.")

# Bot√£o para voltar √† p√°gina inicial, usando um link direto para o arquivo Home.py.
# st.page_link("Home.py", label="Voltar ao In√≠cio", icon="üè†") # O Streamlit cria automaticamente a navega√ß√£o, ent√£o este bot√£o pode ser opcional.